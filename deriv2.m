% This code was generated using ADiGator version 1.4
% Â©2010-2014 Matthew J. Weinstein and Anil V. Rao
% ADiGator may be obtained at https://sourceforge.net/projects/adigator/ 
% Contact: mweinstein@ufl.edu
% Bugs/suggestions may be reported to the sourceforge forums
%                    DISCLAIMER
% ADiGator is a general-purpose software distributed under the GNU General
% Public License version 3.0. While the software is distributed with the
% hope that it will be useful, both the software and generated code are
% provided 'AS IS' with NO WARRANTIES OF ANY KIND and no merchantability
% or fitness for any purpose or application.

function x_dot = deriv2(x_in,u_in,param)
global ADiGator_deriv2
if isempty(ADiGator_deriv2); ADiGator_LoadData(); end
Gator1Data = ADiGator_deriv2.deriv2.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: %%
ac1_state.dx = x_in.dx(Gator1Data.Index2);
ac1_state.f = x_in.f(Gator1Data.Index1);
%User Line: ac1_state = x_in(1:12);
%User Line: %  ctr1 = u_in(1:3);
%User Line: % ctr1 = [0, 0, u_in(3)];%u_in(1:3);
ctr1.f =  [0, 0, 0];
%User Line: ctr1 = [0, 0, 0];
cada1f1 = u_in(4);
thr1.f = cada1f1*20;
%User Line: thr1 = u_in(4)*20;
%User Line: %extract vars from state input
cada1f1dx = ac1_state.dx(1);
cada1f1 = ac1_state.f(1);
cada1f2dx = ac1_state.dx(2);
cada1f2 = ac1_state.f(2);
cada1f3dx = ac1_state.dx(3);
cada1f3 = ac1_state.f(3);
cada1td1 = zeros(3,1);
cada1td1(1) = cada1f1dx;
cada1td1(2) = cada1f2dx;
cada1td1(3) = cada1f3dx;
cada1f4dx = cada1td1;
cada1f4 = [cada1f1 cada1f2 cada1f3];
XYZ1.dx = cada1f4dx;
XYZ1.f = cada1f4.';
%User Line: XYZ1 = [ac1_state(1), ac1_state(2),ac1_state(3)]';
cada1f1dx = ac1_state.dx(7);
cada1f1 = ac1_state.f(7);
cada1f2dx = ac1_state.dx(8);
cada1f2 = ac1_state.f(8);
cada1f3dx = ac1_state.dx(9);
cada1f3 = ac1_state.f(9);
cada1td1 = zeros(3,1);
cada1td1(1) = cada1f1dx;
cada1td1(2) = cada1f2dx;
cada1td1(3) = cada1f3dx;
cada1f4dx = cada1td1;
cada1f4 = [cada1f1 cada1f2 cada1f3];
Eul1.dx = cada1f4dx;
Eul1.f = cada1f4.';
%User Line: Eul1 = [ac1_state(7), ac1_state(8), ac1_state(9)]';
%User Line: %extract constants
m.f = param(1);
%User Line: m = param(1);
cada1f1 = param(12);
cada1f2 = param(13);
cada1f3 = param(14);
cada1f4 = [cada1f1 cada1f2 cada1f3];
moi_ac.f = cada1f4.';
%User Line: moi_ac = [param(12), param(13), param(14)]';
d.f = param(17);
%User Line: d = param(17);
k_line.f = param(18);
%User Line: k_line = param(18);
coeff.f =  zeros(6, 9);
%User Line: coeff = zeros(6, 9);
cada1f1 = param(19);
coeff.f(1,1) = cada1f1;
%User Line: coeff(1, 1) = param(19);
cada1f1 = param(20);
coeff.f(1,3) = cada1f1;
%User Line: coeff(1, 3) = param(20);
cada1f1 = param(21);
coeff.f(2,6) = cada1f1;
%User Line: coeff(2, 6) = param(21);
cada1f1 = param(22);
coeff.f(3,1) = cada1f1;
%User Line: coeff(3, 1) = param(22);
cada1f1 = param(23);
coeff.f(3,3) = cada1f1;
%User Line: coeff(3, 3) = param(23);
cada1f1 = param(24);
coeff.f(4,8) = cada1f1;
%User Line: coeff(4, 8) = param(24);
cada1f1 = param(25);
coeff.f(4,8) = cada1f1;
%User Line: coeff(4,8) = param(25);
cada1f1 = param(26);
coeff.f(5,3) = cada1f1;
%User Line: coeff(5, 3) = param(26);
cada1f1 = param(27);
coeff.f(5,5) = cada1f1;
%User Line: coeff(5, 5) = param(27);
cada1f1 = param(28);
coeff.f(6,6) = cada1f1;
%User Line: coeff(6, 6) = param(28);
cada1f1 = param(29);
coeff.f(6,9) = cada1f1;
%User Line: coeff(6, 9) = param(29);
coeff_ctr.f =  zeros(6, 3);
%User Line: coeff_ctr = zeros(6, 3);
cada1f1 = param(30);
coeff_ctr.f(4,1) = cada1f1;
%User Line: coeff_ctr(4, 1) = param(30);
cada1f1 = param(31);
coeff_ctr.f(5,2) = cada1f1;
%User Line: coeff_ctr(5, 2) = param(31);
cada1f1 = param(32);
coeff_ctr.f(6,3) = cada1f1;
%User Line: coeff_ctr(6, 3) = param(32);
yaw_moment_1.f = param(33);
%User Line: yaw_moment_1 = param(33);
pitch_c.f = param(34);
%User Line: pitch_c = param(34);
roll_c_1.f = param(35);
%User Line: roll_c_1 = param(35);
%User Line: %get forces and moments before tension
cadainput3_1.dx = ac1_state.dx; cadainput3_1.f = ac1_state.f;
%User Line: cadainput3_1 = ac1_state;
cadainput3_2.f = ctr1.f;
%User Line: cadainput3_2 = ctr1;
cadainput3_3 = param;
%User Line: cadainput3_3 = param;
cadainput3_4.f = coeff.f;
%User Line: cadainput3_4 = coeff;
cadainput3_5.f = coeff_ctr.f;
%User Line: cadainput3_5 = coeff_ctr;
cadainput3_6.f = yaw_moment_1.f;
%User Line: cadainput3_6 = yaw_moment_1;
cadainput3_7.f = pitch_c.f;
%User Line: cadainput3_7 = pitch_c;
cadainput3_8.f = roll_c_1.f;
%User Line: cadainput3_8 = roll_c_1;
[cadaoutput3_1,cadaoutput3_2,cadaoutput3_3] = ADiGator_get_ac_forces_moments1(cadainput3_1,cadainput3_2,cadainput3_3,cadainput3_4,cadainput3_5,cadainput3_6,cadainput3_7,cadainput3_8);
% Call to function: get_ac_forces_moments
F_out1.dx = cadaoutput3_1.dx; F_out1.f = cadaoutput3_1.f;
%User Line: F_out1 = cadaoutput3_1;
M_tot1.dx = cadaoutput3_2.dx; M_tot1.f = cadaoutput3_2.f;
%User Line: M_tot1 = cadaoutput3_2;
dcm1.dx = cadaoutput3_3.dx; dcm1.f = cadaoutput3_3.f;
%User Line: dcm1 = cadaoutput3_3;
%User Line: % [F_out1, M_tot1, dcm1] = get_ac_forces_moments(ac1_state, ctr1, param, coeff,coeff_ctr, yaw_moment_1, u_in(10)+pitch_c, u_in(9)+roll_c_1);
%User Line: % [F_out2, M_tot2, dcm2] = get_ac_forces_moments(ac2_state, ctr2, param, coeff,coeff_ctr, yaw_moment_2, u_in(12)+pitch_c, u_in(11)+roll_c_2);
cada1f1 = u_in(Gator1Data.Index3);
cada1f2 = cada1f1*20;
M_tot1.dx = M_tot1.dx;
M_tot1.f = M_tot1.f + cada1f2;
%User Line: M_tot1 = M_tot1 + u_in(1:3)*20;
%User Line: %tension
cada1td1 = zeros(3,36);
cada1td1(Gator1Data.Index4) = dcm1.dx;
cada1td1 = reshape(dcm1.f\cada1td1,9,12);
cada1td1 = reshape(cada1td1(Gator1Data.Index5,:),3,36);
cada1td1 = dcm1.f.'\cada1td1;
cada1f1dx = -cada1td1(Gator1Data.Index6);
cada1f1 = inv(dcm1.f);
cada1td2 = zeros(3,9);
cada1td2(Gator1Data.Index7) = cada1f1dx;
cada1td2 = F_out1.f.'*cada1td2;
cada1td1 = zeros(18,1);
cada1td1(Gator1Data.Index9) = cada1td2(Gator1Data.Index8);
cada1td2 = zeros(3,6);
cada1td2(Gator1Data.Index10) = F_out1.dx;
cada1td2 = cada1f1*cada1td2;
cada1td2 = cada1td2(:);
cada1td1 = cada1td1 + cada1td2(Gator1Data.Index11);
F_out1_inertial.dx = cada1td1;
F_out1_inertial.f = cada1f1*F_out1.f;
%User Line: F_out1_inertial = inv(dcm1)*F_out1;
cada1f1dx = XYZ1.dx(1);
cada1f1 = XYZ1.f(1);
cada1f2dx = 2.*cada1f1.^(2-1).*cada1f1dx;
cada1f2 = cada1f1^2;
cada1f3dx = XYZ1.dx(2);
cada1f3 = XYZ1.f(2);
cada1f4dx = 2.*cada1f3.^(2-1).*cada1f3dx;
cada1f4 = cada1f3^2;
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2 + cada1f4;
cada1f6dx = XYZ1.dx(3);
cada1f6 = XYZ1.f(3);
cada1f7dx = 2.*cada1f6.^(2-1).*cada1f6dx;
cada1f7 = cada1f6^2;
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index12) = cada1f5dx;
cada1td1(3) = cada1td1(3) + cada1f7dx;
cada1f8dx = cada1td1;
cada1f8 = cada1f5 + cada1f7;
dist1.dx = (1/2)./sqrt(cada1f8).*cada1f8dx;
dist1.dx(cada1f8 == 0 & cada1f8dx == 0) = 0;
dist1.f = sqrt(cada1f8);
%User Line: dist1 = sqrt(XYZ1(1)^2+XYZ1(2)^2+XYZ1(3)^2);
cada1f1dx = XYZ1.dx(1);
cada1f1 = XYZ1.f(1);
cada1td1 = zeros(3,1);
cada1td1(1) = cada1f1dx./dist1.f;
cada1td1 = cada1td1 + -cada1f1./dist1.f.^2.*dist1.dx;
cada1f2dx = cada1td1;
cada1f2 = cada1f1/dist1.f;
cada1f3dx = XYZ1.dx(2);
cada1f3 = XYZ1.f(2);
cada1td1 = zeros(3,1);
cada1td1(2) = cada1f3dx./dist1.f;
cada1td1 = cada1td1 + -cada1f3./dist1.f.^2.*dist1.dx;
cada1f4dx = cada1td1;
cada1f4 = cada1f3/dist1.f;
cada1f5dx = XYZ1.dx(3);
cada1f5 = XYZ1.f(3);
cada1td1 = zeros(3,1);
cada1td1(3) = cada1f5dx./dist1.f;
cada1td1 = cada1td1 + -cada1f5./dist1.f.^2.*dist1.dx;
cada1f6dx = cada1td1;
cada1f6 = cada1f5/dist1.f;
cada1td1 = zeros(9,1);
cada1td1(Gator1Data.Index13) = cada1f2dx;
cada1td1(Gator1Data.Index14) = cada1f4dx;
cada1td1(Gator1Data.Index15) = cada1f6dx;
cada1f7dx = cada1td1;
cada1f7 = [cada1f2 cada1f4 cada1f6];
r1_norm.dx = cada1f7dx;
r1_norm.f = cada1f7.';
%User Line: r1_norm = [XYZ1(1)/dist1, XYZ1(2)/dist1, XYZ1(3)/dist1]';
gen_d1.f = d.f;
%User Line: gen_d1 = d;
cada1f1dx = dist1.dx;
cada1f1 = dist1.f - gen_d1.f;
Force_elastic1_mag.dx = k_line.f.*cada1f1dx;
Force_elastic1_mag.f = cada1f1*k_line.f;
%User Line: Force_elastic1_mag = (dist1-gen_d1)*k_line;
cada1f1dx = -Force_elastic1_mag.dx;
cada1f1 = uminus(Force_elastic1_mag.f);
cada1tempdx = cada1f1dx(Gator1Data.Index16);
cada1tf1 = r1_norm.f(Gator1Data.Index17);
cada1td1 = cada1tf1(:).*cada1tempdx;
cada1td1 = cada1td1 + cada1f1.*r1_norm.dx;
Force_elastic1.dx = cada1td1;
Force_elastic1.f = cada1f1*r1_norm.f;
%User Line: Force_elastic1 = -Force_elastic1_mag*r1_norm;
cada1td1 = zeros(27,1);
cada1td1(Gator1Data.Index18) = F_out1_inertial.dx;
cada1td1(Gator1Data.Index19) = cada1td1(Gator1Data.Index19) + Force_elastic1.dx;
F_tot1_inertial.dx = cada1td1;
F_tot1_inertial.f = F_out1_inertial.f + Force_elastic1.f;
%User Line: F_tot1_inertial = F_out1_inertial+Force_elastic1;
cada1td2 = zeros(3,8);
cada1td2(Gator1Data.Index20) = dcm1.dx;
cada1td2 = F_tot1_inertial.f.'*cada1td2;
cada1td1 = zeros(27,1);
cada1td1(Gator1Data.Index22) = cada1td2(Gator1Data.Index21);
cada1td2 = zeros(3,9);
cada1td2(Gator1Data.Index23) = F_tot1_inertial.dx;
cada1td2 = dcm1.f*cada1td2;
cada1td2 = cada1td2(:);
cada1td1 = cada1td1 + cada1td2(Gator1Data.Index24);
F_tot1.dx = cada1td1;
F_tot1.f = dcm1.f*F_tot1_inertial.f;
%User Line: F_tot1 = dcm1*F_tot1_inertial;
%User Line: % F_tot1 = dcm1*F_tot1_inertial + u_in(1:3);
%User Line: %solve for output accelerations
cada1f1dx = F_tot1.dx(Gator1Data.Index25);
cada1f1 = F_tot1.f(1);
cada1f2dx = cada1f1dx./m.f;
cada1f2 = cada1f1/m.f;
u_dot1.dx = cada1f2dx;
u_dot1.f = cada1f2 + thr1.f;
%User Line: u_dot1 = F_tot1(1)/m+thr1;
cada1f1dx = F_tot1.dx(Gator1Data.Index26);
cada1f1 = F_tot1.f(2);
v_dot1.dx = cada1f1dx./m.f;
v_dot1.f = cada1f1/m.f;
%User Line: v_dot1 = F_tot1(2)/m;
cada1f1dx = F_tot1.dx(Gator1Data.Index27);
cada1f1 = F_tot1.f(3);
w_dot1.dx = cada1f1dx./m.f;
w_dot1.f = cada1f1/m.f;
%User Line: w_dot1 = F_tot1(3)/m;
%User Line: %p_dot1 = M_tot1(1)/moi_ac(1); q_dot1 = M_tot1(2)/moi_ac(2); r_dot1 = M_tot1(3)/moi_ac(3);
%User Line: %extract vars from state input
u1.dx = ac1_state.dx(4);
u1.f = ac1_state.f(4);
%User Line: u1 = ac1_state(4);
v1.dx = ac1_state.dx(5);
v1.f = ac1_state.f(5);
%User Line: v1 = ac1_state(5);
w1.dx = ac1_state.dx(6);
w1.f = ac1_state.f(6);
%User Line: w1 = ac1_state(6);
p1.dx = ac1_state.dx(10);
p1.f = ac1_state.f(10);
%User Line: p1 = ac1_state(10);
q1.dx = ac1_state.dx(11);
q1.f = ac1_state.f(11);
%User Line: q1 = ac1_state(11);
r1.dx = ac1_state.dx(12);
r1.f = ac1_state.f(12);
%User Line: r1 = ac1_state(12);
%User Line: %6DOF
cada1td1 = zeros(3,36);
cada1td1(Gator1Data.Index28) = dcm1.dx;
cada1td1 = reshape(dcm1.f\cada1td1,9,12);
cada1td1 = reshape(cada1td1(Gator1Data.Index29,:),3,36);
cada1td1 = dcm1.f.'\cada1td1;
cada1f1dx = -cada1td1(Gator1Data.Index30);
cada1f1 = inv(dcm1.f);
cada1td1 = zeros(3,1);
cada1td1(1) = u1.dx;
cada1td1(2) = v1.dx;
cada1td1(3) = w1.dx;
cada1f2dx = cada1td1;
cada1f2 = [u1.f v1.f w1.f];
cada1f3dx = cada1f2dx;
cada1f3 = cada1f2.';
cada1td2 = zeros(3,9);
cada1td2(Gator1Data.Index31) = cada1f1dx;
cada1td2 = cada1f3.'*cada1td2;
cada1td1 = zeros(18,1);
cada1td1(Gator1Data.Index33) = cada1td2(Gator1Data.Index32);
cada1td2 = zeros(3,3);
cada1td2(Gator1Data.Index34) = cada1f3dx;
cada1td2 = cada1f1*cada1td2;
cada1td2 = cada1td2(:);
cada1td1(Gator1Data.Index36) = cada1td1(Gator1Data.Index36) + cada1td2(Gator1Data.Index35);
XYZ_dot1.dx = cada1td1;
XYZ_dot1.f = cada1f1*cada1f3;
%User Line: XYZ_dot1 = (inv(dcm1)*[u1, v1, w1]');
cada1td1 = zeros(27,1);
cada1td1(Gator1Data.Index37) = u_dot1.dx;
cada1td1(Gator1Data.Index38) = v_dot1.dx;
cada1td1(Gator1Data.Index39) = w_dot1.dx;
cada1f1dx = cada1td1;
cada1f1 = [u_dot1.f v_dot1.f w_dot1.f];
cada1f2dx = cada1f1dx;
cada1f2 = cada1f1.';
cada1td1 = zeros(3,1);
cada1td1(1) = u1.dx;
cada1td1(2) = v1.dx;
cada1td1(3) = w1.dx;
cada1f3dx = cada1td1;
cada1f3 = [u1.f v1.f w1.f];
cada1f4dx = cada1f3dx;
cada1f4 = cada1f3.';
cada1td1 = zeros(3,1);
cada1td1(1) = p1.dx;
cada1td1(2) = q1.dx;
cada1td1(3) = r1.dx;
cada1f5dx = cada1td1;
cada1f5 = [p1.f q1.f r1.f];
cada1f6dx = cada1f5dx;
cada1f6 = cada1f5.';
cada1td1 = zeros(12,1);
cada1td1(Gator1Data.Index41) = cada1f4dx.*cada1f6(Gator1Data.Index40);
cada1td1(Gator1Data.Index43) = cada1td1(Gator1Data.Index43) - cada1f4dx.*cada1f6(Gator1Data.Index42);
cada1td1(Gator1Data.Index45) = cada1td1(Gator1Data.Index45) + cada1f6dx.*cada1f4(Gator1Data.Index44);
cada1td1(Gator1Data.Index47) = cada1td1(Gator1Data.Index47) - cada1f6dx.*cada1f4(Gator1Data.Index46);
cada1f7dx = cada1td1;
cada1f7 = cross(cada1f4,cada1f6,1);
cada1td1 = zeros(33,1);
cada1td1(Gator1Data.Index48) = cada1f2dx;
cada1td1(Gator1Data.Index49) = cada1td1(Gator1Data.Index49) + cada1f7dx;
UVW_dot1.dx = cada1td1;
UVW_dot1.f = cada1f2 + cada1f7;
%User Line: UVW_dot1 = [u_dot1, v_dot1, w_dot1]'+cross([u1, v1, w1]', [p1, q1, r1]');
cada1f1dx = Eul1.dx(1);
cada1f1 = Eul1.f(1);
cada1f2dx = cos(cada1f1).*cada1f1dx;
cada1f2 = sin(cada1f1);
cada1f3dx = Eul1.dx(2);
cada1f3 = Eul1.f(2);
cada1f4dx = sec(cada1f3).^2.*cada1f3dx;
cada1f4 = tan(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
cada1f6dx = Eul1.dx(1);
cada1f6 = Eul1.f(1);
cada1f7dx = -sin(cada1f6).*cada1f6dx;
cada1f7 = cos(cada1f6);
cada1f8dx = Eul1.dx(2);
cada1f8 = Eul1.f(2);
cada1f9dx = sec(cada1f8).^2.*cada1f8dx;
cada1f9 = tan(cada1f8);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f9.*cada1f7dx;
cada1td1(2) = cada1td1(2) + cada1f7.*cada1f9dx;
cada1f10dx = cada1td1;
cada1f10 = cada1f7*cada1f9;
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index50) = cada1f5dx;
cada1td1(Gator1Data.Index51) = cada1f10dx;
cada1f11dx = cada1td1;
cada1f11 = [1 cada1f5 cada1f10];
cada1f12dx = Eul1.dx(1);
cada1f12 = Eul1.f(1);
cada1f13dx = -sin(cada1f12).*cada1f12dx;
cada1f13 = cos(cada1f12);
cada1f14dx = Eul1.dx(1);
cada1f14 = Eul1.f(1);
cada1f15dx = cos(cada1f14).*cada1f14dx;
cada1f15 = sin(cada1f14);
cada1f16dx = -cada1f15dx;
cada1f16 = uminus(cada1f15);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f13dx;
cada1td1(2) = cada1f16dx;
cada1f17dx = cada1td1;
cada1f17 = [0 cada1f13 cada1f16];
cada1f18dx = Eul1.dx(1);
cada1f18 = Eul1.f(1);
cada1f19dx = cos(cada1f18).*cada1f18dx;
cada1f19 = sin(cada1f18);
cada1f20dx = Eul1.dx(2);
cada1f20 = Eul1.f(2);
cada1f21dx = -sin(cada1f20).*cada1f20dx;
cada1f21 = cos(cada1f20);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f19dx./cada1f21;
cada1td1(2) = cada1td1(2) + -cada1f19./cada1f21.^2.*cada1f21dx;
cada1f22dx = cada1td1;
cada1f22 = cada1f19/cada1f21;
cada1f23dx = Eul1.dx(1);
cada1f23 = Eul1.f(1);
cada1f24dx = -sin(cada1f23).*cada1f23dx;
cada1f24 = cos(cada1f23);
cada1f25dx = Eul1.dx(2);
cada1f25 = Eul1.f(2);
cada1f26dx = -sin(cada1f25).*cada1f25dx;
cada1f26 = cos(cada1f25);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f24dx./cada1f26;
cada1td1(2) = cada1td1(2) + -cada1f24./cada1f26.^2.*cada1f26dx;
cada1f27dx = cada1td1;
cada1f27 = cada1f24/cada1f26;
cada1td1 = zeros(4,1);
cada1td1(Gator1Data.Index52) = cada1f22dx;
cada1td1(Gator1Data.Index53) = cada1f27dx;
cada1f28dx = cada1td1;
cada1f28 = [0 cada1f22 cada1f27];
cada1td1 = zeros(10,1);
cada1td1(Gator1Data.Index54) = cada1f11dx;
cada1td1(Gator1Data.Index55) = cada1f17dx;
cada1td1(Gator1Data.Index56) = cada1f28dx;
J1.dx = cada1td1;
J1.f = [cada1f11;cada1f17;cada1f28];
%User Line: J1 = [1, sin(Eul1(1))*tan(Eul1(2)), cos(Eul1(1))*tan(Eul1(2)); 0, cos(Eul1(1)), -sin(Eul1(1)); 0, sin(Eul1(1))/cos(Eul1(2)), cos(Eul1(1))/cos(Eul1(2))];
cada1td1 = zeros(3,1);
cada1td1(1) = p1.dx;
cada1td1(2) = q1.dx;
cada1td1(3) = r1.dx;
cada1f1dx = cada1td1;
cada1f1 = [p1.f q1.f r1.f];
cada1f2dx = cada1f1dx;
cada1f2 = cada1f1.';
cada1td2 = zeros(3,5);
cada1td2(Gator1Data.Index57) = J1.dx;
cada1td2 = cada1f2.'*cada1td2;
cada1td1 = zeros(14,1);
cada1td1(Gator1Data.Index59) = cada1td2(Gator1Data.Index58);
cada1td2 = zeros(3,3);
cada1td2(Gator1Data.Index60) = cada1f2dx;
cada1td2 = J1.f*cada1td2;
cada1td2 = cada1td2(:);
cada1td1(Gator1Data.Index62) = cada1td1(Gator1Data.Index62) + cada1td2(Gator1Data.Index61);
Eul_dot1.dx = cada1td1;
Eul_dot1.f = J1.f*cada1f2;
%User Line: Eul_dot1 = (J1*[p1, q1, r1]');
cada1f1 = moi_ac.f(1);
cada1f2 = [cada1f1 0 0];
cada1f3 = moi_ac.f(2);
cada1f4 = [0 cada1f3 0];
cada1f5 = moi_ac.f(3);
cada1f6 = [0 0 cada1f5];
Inertia.f = [cada1f2;cada1f4;cada1f6];
%User Line: Inertia = [moi_ac(1), 0, 0; 0, moi_ac(2), 0; 0, 0, moi_ac(3)];
cada1td1 = zeros(3,1);
cada1td1(1) = p1.dx;
cada1td1(2) = q1.dx;
cada1td1(3) = r1.dx;
cada1f1dx = cada1td1;
cada1f1 = [p1.f q1.f r1.f];
cada1f2dx = cada1f1dx;
cada1f2 = cada1f1.';
cada1td1 = zeros(3,1);
cada1td1(1) = p1.dx;
cada1td1(2) = q1.dx;
cada1td1(3) = r1.dx;
cada1f3dx = cada1td1;
cada1f3 = [p1.f q1.f r1.f];
cada1f4dx = cada1f3dx;
cada1f4 = cada1f3.';
cada1td1 = zeros(3,3);
cada1td1(Gator1Data.Index63) = cada1f4dx;
cada1td1 = Inertia.f*cada1td1;
cada1td1 = cada1td1(:);
cada1f5dx = cada1td1(Gator1Data.Index64);
cada1f5 = Inertia.f*cada1f4;
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index66) = cada1f2dx.*cada1f5(Gator1Data.Index65);
cada1td1(Gator1Data.Index68) = cada1td1(Gator1Data.Index68) - cada1f2dx.*cada1f5(Gator1Data.Index67);
cada1td1(Gator1Data.Index70) = cada1td1(Gator1Data.Index70) + cada1f5dx.*cada1f2(Gator1Data.Index69);
cada1td1(Gator1Data.Index72) = cada1td1(Gator1Data.Index72) - cada1f5dx.*cada1f2(Gator1Data.Index71);
cada1f6dx = cada1td1;
cada1f6 = cross(cada1f2,cada1f5,1);
cada1td1 = zeros(33,1);
cada1td1(Gator1Data.Index73) = M_tot1.dx;
cada1td1(Gator1Data.Index74) = cada1td1(Gator1Data.Index74) + -cada1f6dx;
M_eff1.dx = cada1td1;
M_eff1.f = M_tot1.f - cada1f6;
%User Line: M_eff1 = M_tot1-cross([p1, q1, r1]', Inertia*[p1, q1, r1]');
cada1f1 = inv(Inertia.f);
cada1f2dx = M_eff1.dx;
cada1f2 = M_eff1.f.';
cada1td1 = zeros(3,12);
cada1td1(Gator1Data.Index75) = cada1f2dx;
cada1td1 = cada1f1.'*cada1td1;
cada1td1 = cada1td1(:);
cada1f3dx = cada1td1(Gator1Data.Index76);
cada1f3 = cada1f2*cada1f1;
PQR_dot1.dx = cada1f3dx;
PQR_dot1.f = cada1f3.';
%User Line: PQR_dot1 = (M_eff1'*inv(Inertia))';
%User Line: %output derivatives
cada1f1dx = XYZ_dot1.dx;
cada1f1 = XYZ_dot1.f.';
cada1f2dx = UVW_dot1.dx;
cada1f2 = UVW_dot1.f.';
cada1f3dx = Eul_dot1.dx;
cada1f3 = Eul_dot1.f.';
cada1f4dx = PQR_dot1.dx;
cada1f4 = PQR_dot1.f.';
cada1td1 = zeros(98,1);
cada1td1(Gator1Data.Index77) = cada1f1dx;
cada1td1(Gator1Data.Index78) = cada1f2dx;
cada1td1(Gator1Data.Index79) = cada1f3dx;
cada1td1(Gator1Data.Index80) = cada1f4dx;
x_dot_ac1.dx = cada1td1;
x_dot_ac1.f = [cada1f1 cada1f2 cada1f3 cada1f4];
%User Line: x_dot_ac1 = [XYZ_dot1', UVW_dot1', Eul_dot1', PQR_dot1'];
x_dot.dx = x_dot_ac1.dx;
x_dot.f = x_dot_ac1.f.';
%User Line: x_dot = [x_dot_ac1]';
%User Line: %%
x_dot.dx_size = [12,12];
x_dot.dx_location = Gator1Data.Index81;
end
function R = ADiGator_eul2rotmat1(eul)
global ADiGator_deriv2
Gator1Data = ADiGator_deriv2.ADiGator_eul2rotmat1.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: %EUL2ROTM Convert Euler angles to rotation matrix
%User Line: %R = zeros(3,3,size(eul,1));
R.f =  zeros(3);
%User Line: R = zeros(3);
cada1f1dx = eul.dx(2);
cada1f1 = eul.f(2);
cada1f2dx = -sin(cada1f1).*cada1f1dx;
cada1f2 = cos(cada1f1);
cada1f3dx = eul.dx(3);
cada1f3 = eul.f(1);
cada1f4dx = -sin(cada1f3).*cada1f3dx;
cada1f4 = cos(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
R.dx = cada1f5dx;
R.f(1,1) = cada1f5;
%User Line: R(1, 1) = cos(eul(2))*cos(eul(1));
cada1f1dx = eul.dx(1);
cada1f1 = eul.f(3);
cada1f2dx = cos(cada1f1).*cada1f1dx;
cada1f2 = sin(cada1f1);
cada1f3dx = eul.dx(2);
cada1f3 = eul.f(2);
cada1f4dx = cos(cada1f3).*cada1f3dx;
cada1f4 = sin(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
cada1f6dx = eul.dx(3);
cada1f6 = eul.f(1);
cada1f7dx = -sin(cada1f6).*cada1f6dx;
cada1f7 = cos(cada1f6);
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index1) = cada1f7.*cada1f5dx;
cada1td1(3) = cada1td1(3) + cada1f5.*cada1f7dx;
cada1f8dx = cada1td1;
cada1f8 = cada1f5*cada1f7;
cada1f9dx = eul.dx(1);
cada1f9 = eul.f(3);
cada1f10dx = -sin(cada1f9).*cada1f9dx;
cada1f10 = cos(cada1f9);
cada1f11dx = eul.dx(3);
cada1f11 = eul.f(1);
cada1f12dx = cos(cada1f11).*cada1f11dx;
cada1f12 = sin(cada1f11);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f12.*cada1f10dx;
cada1td1(2) = cada1td1(2) + cada1f10.*cada1f12dx;
cada1f13dx = cada1td1;
cada1f13 = cada1f10*cada1f12;
cada1td1 = cada1f8dx;
cada1td1(Gator1Data.Index2) = cada1td1(Gator1Data.Index2) + -cada1f13dx;
cada1f14dx = cada1td1;
cada1f14 = cada1f8 - cada1f13;
cada1td1 = zeros(5,1);
cada1td1(Gator1Data.Index3) = cada1f14dx;
cada1td1(Gator1Data.Index4) = R.dx(Gator1Data.Index5);
R.dx = cada1td1;
R.f(1,2) = cada1f14;
%User Line: R(1,2) = sin(eul(3))*sin(eul(2))*cos(eul(1)) - cos(eul(3))*sin(eul(1));
cada1f1dx = eul.dx(1);
cada1f1 = eul.f(3);
cada1f2dx = -sin(cada1f1).*cada1f1dx;
cada1f2 = cos(cada1f1);
cada1f3dx = eul.dx(2);
cada1f3 = eul.f(2);
cada1f4dx = cos(cada1f3).*cada1f3dx;
cada1f4 = sin(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
cada1f6dx = eul.dx(3);
cada1f6 = eul.f(1);
cada1f7dx = -sin(cada1f6).*cada1f6dx;
cada1f7 = cos(cada1f6);
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index6) = cada1f7.*cada1f5dx;
cada1td1(3) = cada1td1(3) + cada1f5.*cada1f7dx;
cada1f8dx = cada1td1;
cada1f8 = cada1f5*cada1f7;
cada1f9dx = eul.dx(1);
cada1f9 = eul.f(3);
cada1f10dx = cos(cada1f9).*cada1f9dx;
cada1f10 = sin(cada1f9);
cada1f11dx = eul.dx(3);
cada1f11 = eul.f(1);
cada1f12dx = cos(cada1f11).*cada1f11dx;
cada1f12 = sin(cada1f11);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f12.*cada1f10dx;
cada1td1(2) = cada1td1(2) + cada1f10.*cada1f12dx;
cada1f13dx = cada1td1;
cada1f13 = cada1f10*cada1f12;
cada1td1 = cada1f8dx;
cada1td1(Gator1Data.Index7) = cada1td1(Gator1Data.Index7) + cada1f13dx;
cada1f14dx = cada1td1;
cada1f14 = cada1f8 + cada1f13;
cada1td1 = zeros(8,1);
cada1td1(Gator1Data.Index8) = cada1f14dx;
cada1td1(Gator1Data.Index9) = R.dx(Gator1Data.Index10);
R.dx = cada1td1;
R.f(1,3) = cada1f14;
%User Line: R(1,3) = cos(eul(3))*sin(eul(2))*cos(eul(1)) + sin(eul(3))*sin(eul(1));
cada1f1dx = eul.dx(2);
cada1f1 = eul.f(2);
cada1f2dx = -sin(cada1f1).*cada1f1dx;
cada1f2 = cos(cada1f1);
cada1f3dx = eul.dx(3);
cada1f3 = eul.f(1);
cada1f4dx = cos(cada1f3).*cada1f3dx;
cada1f4 = sin(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
cada1td1 = zeros(10,1);
cada1td1(Gator1Data.Index11) = cada1f5dx;
cada1td1(Gator1Data.Index12) = R.dx(Gator1Data.Index13);
R.dx = cada1td1;
R.f(2,1) = cada1f5;
%User Line: R(2,1) = cos(eul(2))*sin(eul(1));
cada1f1dx = eul.dx(1);
cada1f1 = eul.f(3);
cada1f2dx = cos(cada1f1).*cada1f1dx;
cada1f2 = sin(cada1f1);
cada1f3dx = eul.dx(2);
cada1f3 = eul.f(2);
cada1f4dx = cos(cada1f3).*cada1f3dx;
cada1f4 = sin(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
cada1f6dx = eul.dx(3);
cada1f6 = eul.f(1);
cada1f7dx = cos(cada1f6).*cada1f6dx;
cada1f7 = sin(cada1f6);
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index14) = cada1f7.*cada1f5dx;
cada1td1(3) = cada1td1(3) + cada1f5.*cada1f7dx;
cada1f8dx = cada1td1;
cada1f8 = cada1f5*cada1f7;
cada1f9dx = eul.dx(1);
cada1f9 = eul.f(3);
cada1f10dx = -sin(cada1f9).*cada1f9dx;
cada1f10 = cos(cada1f9);
cada1f11dx = eul.dx(3);
cada1f11 = eul.f(1);
cada1f12dx = -sin(cada1f11).*cada1f11dx;
cada1f12 = cos(cada1f11);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f12.*cada1f10dx;
cada1td1(2) = cada1td1(2) + cada1f10.*cada1f12dx;
cada1f13dx = cada1td1;
cada1f13 = cada1f10*cada1f12;
cada1td1 = cada1f8dx;
cada1td1(Gator1Data.Index15) = cada1td1(Gator1Data.Index15) + cada1f13dx;
cada1f14dx = cada1td1;
cada1f14 = cada1f8 + cada1f13;
cada1td1 = zeros(13,1);
cada1td1(Gator1Data.Index16) = cada1f14dx;
cada1td1(Gator1Data.Index17) = R.dx(Gator1Data.Index18);
R.dx = cada1td1;
R.f(2,2) = cada1f14;
%User Line: R(2,2) = sin(eul(3))*sin(eul(2))*sin(eul(1)) + cos(eul(3))*cos(eul(1));
cada1f1dx = eul.dx(1);
cada1f1 = eul.f(3);
cada1f2dx = -sin(cada1f1).*cada1f1dx;
cada1f2 = cos(cada1f1);
cada1f3dx = eul.dx(2);
cada1f3 = eul.f(2);
cada1f4dx = cos(cada1f3).*cada1f3dx;
cada1f4 = sin(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
cada1f6dx = eul.dx(3);
cada1f6 = eul.f(1);
cada1f7dx = cos(cada1f6).*cada1f6dx;
cada1f7 = sin(cada1f6);
cada1td1 = zeros(3,1);
cada1td1(Gator1Data.Index19) = cada1f7.*cada1f5dx;
cada1td1(3) = cada1td1(3) + cada1f5.*cada1f7dx;
cada1f8dx = cada1td1;
cada1f8 = cada1f5*cada1f7;
cada1f9dx = eul.dx(1);
cada1f9 = eul.f(3);
cada1f10dx = cos(cada1f9).*cada1f9dx;
cada1f10 = sin(cada1f9);
cada1f11dx = eul.dx(3);
cada1f11 = eul.f(1);
cada1f12dx = -sin(cada1f11).*cada1f11dx;
cada1f12 = cos(cada1f11);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f12.*cada1f10dx;
cada1td1(2) = cada1td1(2) + cada1f10.*cada1f12dx;
cada1f13dx = cada1td1;
cada1f13 = cada1f10*cada1f12;
cada1td1 = cada1f8dx;
cada1td1(Gator1Data.Index20) = cada1td1(Gator1Data.Index20) + -cada1f13dx;
cada1f14dx = cada1td1;
cada1f14 = cada1f8 - cada1f13;
cada1td1 = zeros(16,1);
cada1td1(Gator1Data.Index21) = cada1f14dx;
cada1td1(Gator1Data.Index22) = R.dx(Gator1Data.Index23);
R.dx = cada1td1;
R.f(2,3) = cada1f14;
%User Line: R(2,3) = cos(eul(3))*sin(eul(2))*sin(eul(1)) - sin(eul(3))*cos(eul(1));
cada1f1dx = eul.dx(2);
cada1f1 = eul.f(2);
cada1f2dx = cos(cada1f1).*cada1f1dx;
cada1f2 = sin(cada1f1);
cada1f3dx = -cada1f2dx;
cada1f3 = uminus(cada1f2);
cada1td1 = zeros(17,1);
cada1td1(7) = cada1f3dx;
cada1td1(Gator1Data.Index24) = R.dx(Gator1Data.Index25);
R.dx = cada1td1;
R.f(3,1) = cada1f3;
%User Line: R(3,1) = -sin(eul(2));
cada1f1dx = eul.dx(1);
cada1f1 = eul.f(3);
cada1f2dx = cos(cada1f1).*cada1f1dx;
cada1f2 = sin(cada1f1);
cada1f3dx = eul.dx(2);
cada1f3 = eul.f(2);
cada1f4dx = -sin(cada1f3).*cada1f3dx;
cada1f4 = cos(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
cada1td1 = zeros(19,1);
cada1td1(Gator1Data.Index26) = cada1f5dx;
cada1td1(Gator1Data.Index27) = R.dx(Gator1Data.Index28);
R.dx = cada1td1;
R.f(3,2) = cada1f5;
%User Line: R(3,2) = sin(eul(3))*cos(eul(2));
cada1f1dx = eul.dx(1);
cada1f1 = eul.f(3);
cada1f2dx = -sin(cada1f1).*cada1f1dx;
cada1f2 = cos(cada1f1);
cada1f3dx = eul.dx(2);
cada1f3 = eul.f(2);
cada1f4dx = -sin(cada1f3).*cada1f3dx;
cada1f4 = cos(cada1f3);
cada1td1 = zeros(2,1);
cada1td1(1) = cada1f4.*cada1f2dx;
cada1td1(2) = cada1td1(2) + cada1f2.*cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2*cada1f4;
cada1td1 = zeros(21,1);
cada1td1(Gator1Data.Index29) = cada1f5dx;
cada1td1(Gator1Data.Index30) = R.dx(Gator1Data.Index31);
R.dx = cada1td1;
R.f(3,3) = cada1f5;
%User Line: R(3,3) = cos(eul(3))*cos(eul(2));
end
function [F_out,M_out,dcm] = ADiGator_get_ac_forces_moments1(state,ctr,param,coeff,coeff_ctr,yaw_moment_coeff,pitch_c,roll_c)
global ADiGator_deriv2
Gator1Data = ADiGator_deriv2.ADiGator_get_ac_forces_moments1.Gator1Data;
% ADiGator Start Derivative Computations
%User Line: %extract vars from state input
x.dx = state.dx(1);
x.f = state.f(1);
%User Line: x = state(1);
y.dx = state.dx(2);
y.f = state.f(2);
%User Line: y = state(2);
z.dx = state.dx(3);
z.f = state.f(3);
%User Line: z = state(3);
u.dx = state.dx(4);
u.f = state.f(4);
%User Line: u = state(4);
v.dx = state.dx(5);
v.f = state.f(5);
%User Line: v = state(5);
w.dx = state.dx(6);
w.f = state.f(6);
%User Line: w = state(6);
phi.dx = state.dx(7);
phi.f = state.f(7);
%User Line: phi = state(7);
theta.dx = state.dx(8);
theta.f = state.f(8);
%User Line: theta = state(8);
psi.dx = state.dx(9);
psi.f = state.f(9);
%User Line: psi = state(9);
p.dx = state.dx(10);
p.f = state.f(10);
%User Line: p = state(10);
q.dx = state.dx(11);
q.f = state.f(11);
%User Line: q = state(11);
r.dx = state.dx(12);
r.f = state.f(12);
%User Line: r = state(12);
%User Line: %extract vars from control input
da.f = ctr.f(1);
%User Line: da = ctr(1);
de.f = ctr.f(2);
%User Line: de = ctr(2);
dr.f = ctr.f(3);
%User Line: dr = ctr(3);
%User Line: %extract constants
m.f = param(1);
%User Line: m = param(1);
rho.f = param(2);
%User Line: rho = param(2);
S.f = param(3);
%User Line: S = param(3);
chord.f = param(4);
%User Line: chord = param(4);
span.f = param(5);
%User Line: span = param(5);
cada1f1 = param(6);
cada1f2 = param(7);
cada1f3 = param(8);
gravity.f = [cada1f1 cada1f2 cada1f3];
%User Line: gravity = [param(6), param(7),param(8)];
cada1f1 = param(9);
cada1f2 = param(10);
cada1f3 = param(11);
cada1f4 = [cada1f1 cada1f2 cada1f3];
wind.f = cada1f4.';
%User Line: wind = [param(9), param(10), param(11)]';
roll_k.f = param(15);
%User Line: roll_k = param(15);
pitch_k.f = param(16);
%User Line: pitch_k = param(16);
%User Line: %intermediate variables
cada1td1 = zeros(3,1);
cada1td1(3) = psi.dx;
cada1td1(2) = theta.dx;
cada1td1(1) = phi.dx;
cadainput2_1.dx = cada1td1;
cadainput2_1.f = [psi.f theta.f phi.f];
%User Line: cadainput2_1 = [psi, theta, phi];
cadaoutput2_1 = ADiGator_eul2rotmat1(cadainput2_1);
% Call to function: eul2rotmat
dcm.dx = cadaoutput2_1.dx(Gator1Data.Index1);
dcm.f = cadaoutput2_1.f.';
%User Line: dcm = cadaoutput2_1';
cada1td1 = zeros(3,8);
cada1td1(Gator1Data.Index2) = dcm.dx;
cada1td1 = wind.f.'*cada1td1;
cada1td1 = cada1td1(:);
wind_body.dx = cada1td1(Gator1Data.Index3);
wind_body.f = dcm.f*wind.f;
%User Line: wind_body = dcm*wind;
cada1td1 = zeros(3,1);
cada1td1(1) = u.dx;
cada1td1(2) = v.dx;
cada1td1(3) = w.dx;
cada1f1dx = cada1td1;
cada1f1 = [u.f v.f w.f];
cada1f2dx = cada1f1dx;
cada1f2 = cada1f1.';
cada1td1 = zeros(11,1);
cada1td1(Gator1Data.Index4) = cada1f2dx;
cada1td1(Gator1Data.Index5) = cada1td1(Gator1Data.Index5) + -wind_body.dx;
v_a_vec.dx = cada1td1;
v_a_vec.f = cada1f2 - wind_body.f;
%User Line: v_a_vec = [u, v, w]'-wind_body;
cada1f1dx = v_a_vec.dx(Gator1Data.Index6);
cada1f1 = v_a_vec.f(1);
cada1f2dx = 2.*cada1f1.^(2-1).*cada1f1dx;
cada1f2 = cada1f1^2;
cada1f3dx = v_a_vec.dx(Gator1Data.Index7);
cada1f3 = v_a_vec.f(2);
cada1f4dx = 2.*cada1f3.^(2-1).*cada1f3dx;
cada1f4 = cada1f3^2;
cada1td1 = zeros(5,1);
cada1td1(Gator1Data.Index8) = cada1f2dx;
cada1td1(Gator1Data.Index9) = cada1td1(Gator1Data.Index9) + cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2 + cada1f4;
cada1f6dx = v_a_vec.dx(Gator1Data.Index10);
cada1f6 = v_a_vec.f(3);
cada1f7dx = 2.*cada1f6.^(2-1).*cada1f6dx;
cada1f7 = cada1f6^2;
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index11) = cada1f5dx;
cada1td1(Gator1Data.Index12) = cada1td1(Gator1Data.Index12) + cada1f7dx;
cada1f8dx = cada1td1;
cada1f8 = cada1f5 + cada1f7;
v_a.dx = (1/2)./sqrt(cada1f8).*cada1f8dx;
v_a.dx(cada1f8 == 0 & cada1f8dx == 0) = 0;
v_a.f = sqrt(cada1f8);
%User Line: v_a = sqrt(v_a_vec(1)^2+v_a_vec(2)^2+v_a_vec(3)^2);
cada1f1 = 0.5*rho.f;
cada1f2dx = 2.*v_a.f.^(2-1).*v_a.dx;
cada1f2 = v_a.f^2;
q_bar.dx = cada1f1.*cada1f2dx;
q_bar.f = cada1f1*cada1f2;
%User Line: q_bar = 0.5*rho*v_a^2;
cada1f1dx = v_a_vec.dx(Gator1Data.Index13);
cada1f1 = v_a_vec.f(3);
cada1f2dx = v_a_vec.dx(Gator1Data.Index14);
cada1f2 = v_a_vec.f(1);
cada1td1 = zeros(5,1);
cada1td1(Gator1Data.Index15) = cada1f2./(cada1f2.^2+cada1f1.^2).*cada1f1dx;
cada1td1(Gator1Data.Index16) = cada1td1(Gator1Data.Index16) + -cada1f1./(cada1f2.^2+cada1f1.^2).*cada1f2dx;
alpha.dx = cada1td1;
alpha.f = atan2(cada1f1,cada1f2);
%User Line: alpha = atan2(v_a_vec(3), v_a_vec(1));
cada1f1dx = v_a_vec.dx(Gator1Data.Index17);
cada1f1 = v_a_vec.f(2);
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index18) = cada1f1dx./v_a.f;
cada1td1 = cada1td1 + -cada1f1./v_a.f.^2.*v_a.dx;
cada1f2dx = cada1td1;
cada1f2 = cada1f1/v_a.f;
beta.dx = 1./sqrt(1-cada1f2.^2).*cada1f2dx;
beta.f = asin(cada1f2);
%User Line: beta = asin(v_a_vec(2)/v_a);
%User Line: %non-dimensional aero coefficients
CD0.f = coeff.f(1,1);
%User Line: CD0 = coeff(1, 1);
CDA.f = coeff.f(1,3);
%User Line: CDA = coeff(1, 3);
CYB.f = coeff.f(2,6);
%User Line: CYB = coeff(2, 6);
CL0.f = coeff.f(3,1);
%User Line: CL0 = coeff(3, 1);
CLA.f = coeff.f(3,3);
%User Line: CLA = coeff(3, 3);
ClP.f = coeff.f(4,8);
%User Line: ClP = coeff(4, 8);
ClDa.f = coeff_ctr.f(4,1);
%User Line: ClDa = coeff_ctr(4, 1);
CmA.f = coeff.f(5,3);
%User Line: CmA = coeff(5, 3);
CmQ.f = coeff.f(5,5);
%User Line: CmQ = coeff(5, 5);
CmDe.f = coeff_ctr.f(5,2);
%User Line: CmDe = coeff_ctr(5, 2);
Cn0.f = yaw_moment_coeff.f;
%User Line: Cn0 = yaw_moment_coeff;
CnB.f = coeff.f(6,6);
%User Line: CnB = coeff(6, 6);
CnR.f = coeff.f(6,9);
%User Line: CnR = coeff(6, 9);
CnDr.f = coeff_ctr.f(6,3);
%User Line: CnDr = coeff_ctr(6, 3);
%User Line: %Note:leaving out moment arms becuase assuming CP and CG locations are same
%User Line: %forces
cada1f1 = uminus(CD0.f);
cada1f2dx = CDA.f.*alpha.dx;
cada1f2 = CDA.f*alpha.f;
cada1f3dx = sign(cada1f2).*cada1f2dx;
cada1f3 = abs(cada1f2);
cada1f4dx = -cada1f3dx;
cada1f4 = cada1f1 - cada1f3;
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index19) = q_bar.f.*cada1f4dx;
cada1td1 = cada1td1 + cada1f4.*q_bar.dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f4*q_bar.f;
D.dx = S.f.*cada1f5dx;
D.f = cada1f5*S.f;
%User Line: D = (-CD0-abs(CDA*alpha))*q_bar*S;
cada1f1dx = CYB.f.*beta.dx;
cada1f1 = CYB.f*beta.f;
cada1td1 = q_bar.f.*cada1f1dx;
cada1td1 = cada1td1 + cada1f1.*q_bar.dx;
cada1f2dx = cada1td1;
cada1f2 = cada1f1*q_bar.f;
Y.dx = S.f.*cada1f2dx;
Y.f = cada1f2*S.f;
%User Line: Y = (CYB*beta)*q_bar*S;
cada1f1 = uminus(CL0.f);
cada1f2dx = CLA.f.*alpha.dx;
cada1f2 = CLA.f*alpha.f;
cada1f3dx = -cada1f2dx;
cada1f3 = cada1f1 - cada1f2;
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index20) = q_bar.f.*cada1f3dx;
cada1td1 = cada1td1 + cada1f3.*q_bar.dx;
cada1f4dx = cada1td1;
cada1f4 = cada1f3*q_bar.f;
L.dx = S.f.*cada1f4dx;
L.f = cada1f4*S.f;
%User Line: L = (-CL0-CLA*alpha)*q_bar*S;
%User Line: % stab2body = [cos(alpha), 0, -sin(alpha); 0, 1, 0; sin(alpha), 0, cos(alpha)];
%User Line: % F_aero = stab2body*[D, Y, L]';
cada1td1 = zeros(18,1);
cada1td1(Gator1Data.Index21) = D.dx;
cada1td1(Gator1Data.Index22) = Y.dx;
cada1td1(Gator1Data.Index23) = L.dx;
cada1f1dx = cada1td1;
cada1f1 = [D.f Y.f L.f];
F_aero.dx = cada1f1dx;
F_aero.f = cada1f1.';
%User Line: F_aero = [D, Y, L]';
%User Line: %gravity
cada1f1 = gravity.f.';
cada1td1 = zeros(3,8);
cada1td1(Gator1Data.Index24) = dcm.dx;
cada1td1 = cada1f1.'*cada1td1;
cada1td1 = cada1td1(:);
cada1f2dx = cada1td1(Gator1Data.Index25);
cada1f2 = dcm.f*cada1f1;
F_grav.dx = m.f.*cada1f2dx;
F_grav.f = cada1f2*m.f;
%User Line: F_grav = dcm*gravity'*m;
%User Line: %moments
cada1f1dx = ClP.f.*p.dx;
cada1f1 = ClP.f*p.f;
cada1f2 = ClDa.f*da.f;
cada1f3dx = cada1f1dx;
cada1f3 = cada1f1 + cada1f2;
cada1td1 = zeros(7,1);
cada1td1(7) = q_bar.f.*cada1f3dx;
cada1td1(Gator1Data.Index26) = cada1td1(Gator1Data.Index26) + cada1f3.*q_bar.dx;
cada1f4dx = cada1td1;
cada1f4 = cada1f3*q_bar.f;
cada1f5dx = span.f.*cada1f4dx;
cada1f5 = cada1f4*span.f;
ML.dx = S.f.*cada1f5dx;
ML.f = cada1f5*S.f;
%User Line: ML = (ClP*p+ClDa*da)*q_bar*span*S;
cada1f1dx = CmA.f.*alpha.dx;
cada1f1 = CmA.f*alpha.f;
cada1f2dx = CmQ.f.*q.dx;
cada1f2 = CmQ.f*q.f;
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index27) = cada1f1dx;
cada1td1(6) = cada1td1(6) + cada1f2dx;
cada1f3dx = cada1td1;
cada1f3 = cada1f1 + cada1f2;
cada1f4 = CmDe.f*de.f;
cada1f5dx = cada1f3dx;
cada1f5 = cada1f3 + cada1f4;
cada1td1 = zeros(7,1);
cada1td1(Gator1Data.Index28) = q_bar.f.*cada1f5dx;
cada1td1(Gator1Data.Index29) = cada1td1(Gator1Data.Index29) + cada1f5.*q_bar.dx;
cada1f6dx = cada1td1;
cada1f6 = cada1f5*q_bar.f;
cada1f7dx = chord.f.*cada1f6dx;
cada1f7 = cada1f6*chord.f;
MM.dx = S.f.*cada1f7dx;
MM.f = cada1f7*S.f;
%User Line: MM = (CmA*alpha+CmQ*q+CmDe*de)*q_bar*chord*S;
cada1f1dx = CnB.f.*beta.dx;
cada1f1 = CnB.f*beta.f;
cada1f2dx = cada1f1dx;
cada1f2 = Cn0.f + cada1f1;
cada1f3dx = CnR.f.*r.dx;
cada1f3 = CnR.f*r.f;
cada1td1 = zeros(7,1);
cada1td1(Gator1Data.Index30) = cada1f2dx;
cada1td1(7) = cada1td1(7) + cada1f3dx;
cada1f4dx = cada1td1;
cada1f4 = cada1f2 + cada1f3;
cada1f5 = CnDr.f*dr.f;
cada1f6dx = cada1f4dx;
cada1f6 = cada1f4 + cada1f5;
cada1td1 = q_bar.f.*cada1f6dx;
cada1td1(Gator1Data.Index31) = cada1td1(Gator1Data.Index31) + cada1f6.*q_bar.dx;
cada1f7dx = cada1td1;
cada1f7 = cada1f6*q_bar.f;
cada1f8dx = span.f.*cada1f7dx;
cada1f8 = cada1f7*span.f;
MN.dx = S.f.*cada1f8dx;
MN.f = cada1f8*S.f;
%User Line: MN = (Cn0+CnB*beta+CnR*r+CnDr*dr)*q_bar*span*S;
%User Line: % M_aero = stab2body*[ML, MM, MN]';
cada1td1 = zeros(21,1);
cada1td1(Gator1Data.Index32) = ML.dx;
cada1td1(Gator1Data.Index33) = MM.dx;
cada1td1(Gator1Data.Index34) = MN.dx;
cada1f1dx = cada1td1;
cada1f1 = [ML.f MM.f MN.f];
M_aero.dx = cada1f1dx;
M_aero.f = cada1f1.';
%User Line: M_aero = [ML, MM, MN]';
%User Line: %moment mod
cada1td1 = zeros(3,1);
cada1td1(1) = x.dx;
cada1td1(2) = y.dx;
cada1td1(3) = z.dx;
cada1f1dx = cada1td1;
cada1f1 = [x.f y.f z.f];
cada1f2dx = cada1f1dx;
cada1f2 = cada1f1.';
cada1td2 = zeros(3,8);
cada1td2(Gator1Data.Index35) = dcm.dx;
cada1td2 = cada1f2.'*cada1td2;
cada1td1 = zeros(17,1);
cada1td1(Gator1Data.Index37) = cada1td2(Gator1Data.Index36);
cada1td2 = zeros(3,3);
cada1td2(Gator1Data.Index38) = cada1f2dx;
cada1td2 = dcm.f*cada1td2;
cada1td2 = cada1td2(:);
cada1td1(Gator1Data.Index40) = cada1td1(Gator1Data.Index40) + cada1td2(Gator1Data.Index39);
XYZ_body.dx = cada1td1;
XYZ_body.f = dcm.f*cada1f2;
%User Line: XYZ_body = dcm*[x, y, z]';
cada1f1dx = XYZ_body.dx(Gator1Data.Index41);
cada1f1 = XYZ_body.f(1);
cada1f2dx = 2.*cada1f1.^(2-1).*cada1f1dx;
cada1f2 = cada1f1^2;
cada1f3dx = XYZ_body.dx(Gator1Data.Index42);
cada1f3 = XYZ_body.f(2);
cada1f4dx = 2.*cada1f3.^(2-1).*cada1f3dx;
cada1f4 = cada1f3^2;
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index43) = cada1f2dx;
cada1td1 = cada1td1 + cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2 + cada1f4;
cada1f6dx = XYZ_body.dx(Gator1Data.Index44);
cada1f6 = XYZ_body.f(3);
cada1f7dx = 2.*cada1f6.^(2-1).*cada1f6dx;
cada1f7 = cada1f6^2;
cada1td1 = cada1f5dx;
cada1td1 = cada1td1 + cada1f7dx;
cada1f8dx = cada1td1;
cada1f8 = cada1f5 + cada1f7;
tmp.dx = (1/2)./sqrt(cada1f8).*cada1f8dx;
tmp.dx(cada1f8 == 0 & cada1f8dx == 0) = 0;
tmp.f = sqrt(cada1f8);
%User Line: tmp = sqrt(XYZ_body(1)^2+XYZ_body(2)^2+XYZ_body(3)^2);
cada1f1dx = XYZ_body.dx(Gator1Data.Index45);
cada1f1 = XYZ_body.f(1);
cada1td1 = zeros(6,1);
cada1td1(Gator1Data.Index46) = cada1f1dx./tmp.f;
cada1td1 = cada1td1 + -cada1f1./tmp.f.^2.*tmp.dx;
cada1f2dx = cada1td1;
cada1f2 = cada1f1/tmp.f;
cada1f3dx = XYZ_body.dx(Gator1Data.Index47);
cada1f3 = XYZ_body.f(2);
cada1td1 = cada1f3dx./tmp.f;
cada1td1 = cada1td1 + -cada1f3./tmp.f.^2.*tmp.dx;
cada1f4dx = cada1td1;
cada1f4 = cada1f3/tmp.f;
cada1f5dx = XYZ_body.dx(Gator1Data.Index48);
cada1f5 = XYZ_body.f(3);
cada1td1 = cada1f5dx./tmp.f;
cada1td1 = cada1td1 + -cada1f5./tmp.f.^2.*tmp.dx;
cada1f6dx = cada1td1;
cada1f6 = cada1f5/tmp.f;
cada1td1 = zeros(18,1);
cada1td1(Gator1Data.Index49) = cada1f2dx;
cada1td1(Gator1Data.Index50) = cada1f4dx;
cada1td1(Gator1Data.Index51) = cada1f6dx;
cada1f7dx = cada1td1;
cada1f7 = [cada1f2 cada1f4 cada1f6];
cada1f8dx = cada1f7dx;
cada1f8 = cada1f7.';
T_hat.dx = -cada1f8dx;
T_hat.f = uminus(cada1f8);
%User Line: T_hat = -[XYZ_body(1)/tmp, XYZ_body(2)/tmp, XYZ_body(3)/tmp]';
%User Line: %T_hat = -normalize(XYZ_body, 'norm');
cada1f1dx = T_hat.dx(Gator1Data.Index52);
cada1f1 = T_hat.f(2);
cada1f2dx = 2.*cada1f1.^(2-1).*cada1f1dx;
cada1f2 = cada1f1^2;
cada1f3dx = T_hat.dx(Gator1Data.Index53);
cada1f3 = T_hat.f(3);
cada1f4dx = 2.*cada1f3.^(2-1).*cada1f3dx;
cada1f4 = cada1f3^2;
cada1td1 = cada1f2dx;
cada1td1 = cada1td1 + cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = cada1f2 + cada1f4;
tmp.dx = (1/2)./sqrt(cada1f5).*cada1f5dx;
tmp.dx(cada1f5 == 0 & cada1f5dx == 0) = 0;
tmp.f = sqrt(cada1f5);
%User Line: tmp = sqrt(T_hat(2)^2+T_hat(3)^2);
cada1f1dx = T_hat.dx(Gator1Data.Index54);
cada1f1 = T_hat.f(2);
cada1td1 = cada1f1dx./tmp.f;
cada1td1 = cada1td1 + -cada1f1./tmp.f.^2.*tmp.dx;
cada1f2dx = cada1td1;
cada1f2 = cada1f1/tmp.f;
cada1f3dx = T_hat.dx(Gator1Data.Index55);
cada1f3 = T_hat.f(3);
cada1td1 = cada1f3dx./tmp.f;
cada1td1 = cada1td1 + -cada1f3./tmp.f.^2.*tmp.dx;
cada1f4dx = cada1td1;
cada1f4 = cada1f3/tmp.f;
cada1td1 = zeros(12,1);
cada1td1(Gator1Data.Index56) = cada1f2dx;
cada1td1(Gator1Data.Index57) = cada1f4dx;
cada1f5dx = cada1td1;
cada1f5 = [0 cada1f2 cada1f4];
T_inter_hat.dx = cada1f5dx;
T_inter_hat.f = cada1f5.';
%User Line: T_inter_hat = [0, T_hat(2)/tmp, T_hat(3)/tmp]';
%User Line: % T_inter_hat = normalize(T_hat.*[0, 1, 1]','norm');
y_hat.f =  [0, 0, 1]';
%User Line: y_hat = [0, 0, 1]';
cada1tf1 = y_hat.f(Gator1Data.Index59);
cada1f1dx = cada1tf1(:).*T_inter_hat.dx(Gator1Data.Index58);
cada1f1 = y_hat.f.*T_inter_hat.f;
cada1f2dx = cada1f1dx;
cada1f2 = sum(cada1f1);
cada1f3dx = -1./sqrt(1-cada1f2.^2).*cada1f2dx;
cada1f3 = acos(cada1f2);
cada1f4dx = T_inter_hat.dx(Gator1Data.Index60);
cada1f4 = T_inter_hat.f(2);
cada1f5dx = T_inter_hat.dx(Gator1Data.Index61);
cada1f5 = T_inter_hat.f(2);
cada1f6dx = sign(cada1f5).*cada1f5dx;
cada1f6 = abs(cada1f5);
cada1td1 = cada1f4dx./cada1f6;
cada1td1 = cada1td1 + -cada1f4./cada1f6.^2.*cada1f6dx;
cada1f7dx = cada1td1;
cada1f7 = cada1f4/cada1f6;
cada1td1 = cada1f7.*cada1f3dx;
cada1td1 = cada1td1 + cada1f3.*cada1f7dx;
phi_rel.dx = cada1td1;
phi_rel.f = cada1f3*cada1f7;
%User Line: phi_rel = acos(dot(y_hat, T_inter_hat)).*(T_inter_hat(2)/abs(T_inter_hat(2)));
%User Line: %phi_rel = acos(dot(y_hat, T_inter_hat)).*normalize(T_inter_hat(2), 'norm');
cada1tf1 = T_hat.f(Gator1Data.Index62);
cada1td1 = zeros(18,1);
cada1td1(Gator1Data.Index63) = cada1tf1(:).*T_inter_hat.dx;
cada1tf1 = T_inter_hat.f(Gator1Data.Index64);
cada1td1 = cada1td1 + cada1tf1(:).*T_hat.dx;
cada1f1dx = cada1td1;
cada1f1 = T_inter_hat.f.*T_hat.f;
cada1td1 = zeros(3,6);
cada1td1(Gator1Data.Index65) = cada1f1dx;
cada1td1 = sum(cada1td1,1);
cada1f2dx = cada1td1(:);
cada1f2 = sum(cada1f1);
cada1f3dx = -1./sqrt(1-cada1f2.^2).*cada1f2dx;
cada1f3 = acos(cada1f2);
cada1f4dx = T_hat.dx(Gator1Data.Index66);
cada1f4 = T_hat.f(1);
cada1f5dx = T_hat.dx(Gator1Data.Index67);
cada1f5 = T_hat.f(1);
cada1f6dx = sign(cada1f5).*cada1f5dx;
cada1f6 = abs(cada1f5);
cada1td1 = cada1f4dx./cada1f6;
cada1td1 = cada1td1 + -cada1f4./cada1f6.^2.*cada1f6dx;
cada1f7dx = cada1td1;
cada1f7 = cada1f4/cada1f6;
cada1f8dx = -cada1f7dx;
cada1f8 = uminus(cada1f7);
cada1td1 = cada1f8.*cada1f3dx;
cada1td1 = cada1td1 + cada1f3.*cada1f8dx;
theta_rel.dx = cada1td1;
theta_rel.f = cada1f3*cada1f8;
%User Line: theta_rel = acos(dot(T_inter_hat, T_hat)).*-(T_hat(1)/abs(T_hat(1)));
%User Line: %theta_rel = acos(dot(T_inter_hat, T_hat)).*-normalize(T_hat(1), 'norm');
delta_roll.dx = -phi_rel.dx;
delta_roll.f = roll_c.f - phi_rel.f;
%User Line: delta_roll = roll_c-phi_rel;
delta_pitch.dx = -theta_rel.dx;
delta_pitch.f = pitch_c.f - theta_rel.f;
%User Line: delta_pitch = pitch_c-theta_rel;
cada1f1dx = cos(delta_roll.f).*delta_roll.dx;
cada1f1 = sin(delta_roll.f);
cada1f2dx = -sin(delta_pitch.f).*delta_pitch.dx;
cada1f2 = cos(delta_pitch.f);
cada1td1 = cada1f2.*cada1f1dx;
cada1td1 = cada1td1 + cada1f1.*cada1f2dx;
cada1f3dx = cada1td1;
cada1f3 = cada1f1*cada1f2;
ML_C.dx = roll_k.f.*cada1f3dx;
ML_C.f = cada1f3*roll_k.f;
%User Line: ML_C = (sin(delta_roll)*cos(delta_pitch))*roll_k;
cada1f1dx = cos(delta_pitch.f).*delta_pitch.dx;
cada1f1 = sin(delta_pitch.f);
cada1f2dx = -sin(delta_roll.f).*delta_roll.dx;
cada1f2 = cos(delta_roll.f);
cada1td1 = cada1f2.*cada1f1dx;
cada1td1 = cada1td1 + cada1f1.*cada1f2dx;
cada1f3dx = cada1td1;
cada1f3 = cada1f1*cada1f2;
MM_C.dx = pitch_k.f.*cada1f3dx;
MM_C.f = cada1f3*pitch_k.f;
%User Line: MM_C = (sin(delta_pitch)*cos(delta_roll))*pitch_k;
MN_C.f =  0;
%User Line: MN_C = 0;
cada1td1 = zeros(12,1);
cada1td1(Gator1Data.Index68) = ML_C.dx;
cada1td1(Gator1Data.Index69) = MM_C.dx;
cada1f1dx = cada1td1;
cada1f1 = [ML_C.f MM_C.f MN_C.f];
M_adcs.dx = cada1f1dx;
M_adcs.f = cada1f1.';
%User Line: M_adcs = [ML_C, MM_C, MN_C]';
%User Line: %sum forces and moments
cada1td1 = F_aero.dx;
cada1td1(Gator1Data.Index70) = cada1td1(Gator1Data.Index70) + F_grav.dx;
F_out.dx = cada1td1;
F_out.f = F_aero.f + F_grav.f;
%User Line: F_out = F_aero+F_grav;
cada1td1 = zeros(27,1);
cada1td1(Gator1Data.Index71) = M_aero.dx;
cada1td1(Gator1Data.Index72) = cada1td1(Gator1Data.Index72) + M_adcs.dx;
M_out.dx = cada1td1;
M_out.f = M_aero.f + M_adcs.f;
%User Line: M_out = M_aero+M_adcs;
%User Line: %solve for output accelerations for just aerodynamic model
%User Line: % u_dot = F_out(1)/m;
%User Line: % v_dot = F_out(2)/m;
%User Line: % w_dot = F_out(3)/m;
%User Line: % p_dot = M_out(1)/moi(1);
%User Line: % q_dot = M_out(2)/moi(2);
%User Line: % r_dot = M_out(3)/moi(3);
%User Line: %
%User Line: % x_dot = [u, v, w, p, q, r, u_dot, v_dot, w_dot, p_dot, q_dot, r_dot];
end


function ADiGator_LoadData()
global ADiGator_deriv2
ADiGator_deriv2 = load('deriv2.mat');
return
end